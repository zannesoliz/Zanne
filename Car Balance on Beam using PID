
#include <PID_v1.h>



// defines pins numbers
const int trigPin = 50;       // used to send out ultra sonic signal
const int echoPin = 52;       // receives ultra sonic signal off of object
const int Motor_Speed_Pin = 6;
const int Motor_drive_Dir_pin = 39;
double Setpoint; // desired value
double Output;    // Motor

// PID Parameters

double Kp = .5;
double Ki = 50;
double Kd = 1200;
int i;

// defines variables
long duration;                // time wave traveled
double distance;                 // distance of object


// pin for on/off switch

int SWITCH = 4;


// PID Function

PID myPID(&distance, &Output, &Setpoint, Kp, Ki, Kd,P_ON_M, DIRECT);



////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void setup() {

pinMode(SWITCH,INPUT);                                           // Read switch 
Serial.begin(9600);                                             // Starts the serial communication
  
pinMode(trigPin, OUTPUT);                                        // Sets the trigPin as an Output
pinMode(echoPin, INPUT);                                        // Sets the echoPin as an Input
pinMode(Motor_Speed_Pin, OUTPUT);                               // sets the digital pin 6 as output
pinMode(Motor_drive_Dir_pin, OUTPUT);                           // sets the digital pin 39 as output


//Hardcode the distance we'd like to stay at

Setpoint = 18;                                                  // In cm

//Turn on PID

myPID.SetMode(AUTOMATIC);

//Adjust PID values

myPID.SetTunings(Kp,Ki,Kd);
myPID.SetSampleTime(.5);
myPID.SetOutputLimits(-255, 255);                               // By default limit is 0 - 255. This will allow us to correct for overshoot

}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void loop() {


if(digitalRead(SWITCH) == HIGH)                                             // If switch is on run program else do nothing

{

i=1;
  
// Clears the trigPin
digitalWrite(trigPin, LOW);
delayMicroseconds(2);

// Sets the trigPin on HIGH state for 10 micro seconds
digitalWrite(trigPin, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin, LOW);


// Reads the echoPin, returns the sound wave travel time in microseconds
duration = pulseIn(echoPin, HIGH);
// Calculating the distance


distance = duration*0.034/2;
if (distance > 70) {

  distance = 5;                                                                                       // correcting spikes from hitting side of sensor
  
}

//PID Calculation

myPID.Compute();

//Write the output as calculated by the PID function
if (distance > 24 && distance < 58) {  
digitalWrite(Motor_drive_Dir_pin,HIGH);                                                             // Past desired distance so set motor to robot such that it lifts arm up  

analogWrite(Motor_Speed_Pin , -1 * Output);                                                         // Motor speed is set to pin 6
}
if (distance < 16){ 
digitalWrite(Motor_drive_Dir_pin,LOW);                                                             // Not reached desired distance so set motor to robot such that it lowers arm up
 
analogWrite(Motor_Speed_Pin , Output);                                                             // Motor speed is set to pin 6
}

//else {

//analogWrite(Motor_Speed_Pin , 0);                                                                  // Motor speed is set to pin 6
  
//}
 


}





else if(digitalRead(SWITCH) == LOW)                                             // If switch is on run program else do nothing

{
analogWrite(Motor_Speed_Pin , 0);  
i = 0;  
}



Serial.println(distance);
//Serial.print(" ");
//Serial.println(Output);
//Serial.print(" ");
//Serial.println(Setpoint);

}
